"""
Sistema de Consolidaci√≥n de Facturas - Finkargo
Aplicaci√≥n Streamlit para procesar y consolidar datos de facturaci√≥n
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from modules.drive_manager import DriveManager
from modules.file_processor import FileProcessor
import tempfile
import os
from io import BytesIO

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Facturaci√≥n Finkargo",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Cargar estilos CSS personalizados
def load_css():
    """Carga el archivo CSS personalizado con forzado de recarga"""
    try:
        import os
        import streamlit.components.v1 as components

        # Obtener timestamp para forzar recarga
        css_file = 'assets/styles.css'
        if os.path.exists(css_file):
            with open(css_file, 'r', encoding='utf-8') as f:
                css = f.read()
                # Agregar timestamp como comentario para forzar recarga
                from datetime import datetime
                timestamp = datetime.now().strftime('%Y%m%d%H%M%S')

                # Inyectar solo CSS (sin JavaScript visible)
                st.markdown(f'''
                <style>
                /* CSS v{timestamp} */
                {css}

                /* Fix adicional para forzar texto blanco en botones */
                button[kind="primary"],
                button[data-testid*="baseButton"],
                .stButton button {{
                    color: white !important;
                }}

                button[kind="primary"] *,
                button[data-testid*="baseButton"] *,
                .stButton button *,
                [data-testid="stButton"] * {{
                    color: white !important;
                }}

                /* Ocultar bot√≥n de Deploy y otros elementos de Streamlit */
                #MainMenu {{visibility: hidden;}}
                footer {{visibility: hidden;}}
                header {{visibility: hidden;}}
                .stDeployButton {{display: none;}}
                button[kind="header"] {{display: none;}}
                [data-testid="stToolbar"] {{display: none;}}
                </style>
                ''', unsafe_allow_html=True)

                # Inyectar JavaScript de forma correcta usando components.html
                components.html(
                    """
                    <script>
                    // Buscar el parent window (Streamlit)
                    const parentWindow = window.parent;

                    function forceWhiteButtonText() {
                        const doc = parentWindow.document;
                        const buttons = doc.querySelectorAll(
                            'button[kind="primary"], button[data-testid*="baseButton"], .stButton button, [data-testid="stButton"] button'
                        );

                        buttons.forEach(function(button) {
                            button.style.setProperty('color', 'white', 'important');
                            const children = button.querySelectorAll('*');
                            children.forEach(function(child) {
                                child.style.setProperty('color', 'white', 'important');
                            });
                        });
                    }

                    // Ejecutar despu√©s de cargar
                    setTimeout(forceWhiteButtonText, 500);
                    setTimeout(forceWhiteButtonText, 1000);
                    setTimeout(forceWhiteButtonText, 2000);

                    // Observer para cambios en el DOM
                    const observer = new MutationObserver(forceWhiteButtonText);
                    observer.observe(parentWindow.document.body, { childList: true, subtree: true });
                    </script>
                    """,
                    height=0,
                    width=0,
                )
        else:
            st.error(f"‚ö†Ô∏è Archivo CSS no encontrado en: {os.path.abspath(css_file)}")
    except Exception as e:
        st.error(f"‚ùå Error al cargar estilos: {str(e)}")
        import traceback
        st.code(traceback.format_exc())

# Aplicar estilos
load_css()

# Inicializar session state
if 'consolidated_data' not in st.session_state:
    st.session_state.consolidated_data = None
if 'drive_manager' not in st.session_state:
    st.session_state.drive_manager = None
if 'processed' not in st.session_state:
    st.session_state.processed = False
if 'stats' not in st.session_state:
    st.session_state.stats = None
if 'datos_por_hoja' not in st.session_state:
    st.session_state.datos_por_hoja = None
if 'metadata' not in st.session_state:
    st.session_state.metadata = None
if 'master_data' not in st.session_state:
    st.session_state.master_data = None
if 'master_loaded' not in st.session_state:
    st.session_state.master_loaded = False

# Funci√≥n helper para Drive Manager
def get_drive_manager():
    """Obtener o crear instancia de DriveManager"""
    try:
        if st.session_state.drive_manager is None:
            st.session_state.drive_manager = DriveManager()
        return st.session_state.drive_manager
    except:
        return None

# ==================== HELPER FUNCTIONS PARA UI ====================

def create_card(title, content, card_type="default", icon=""):
    """
    Crea una card personalizada con estilos consistentes

    Args:
        title: T√≠tulo de la card
        content: Contenido HTML o texto
        card_type: "default", "info", "success", "warning"
        icon: Emoji o icono para el t√≠tulo
    """
    card_class = {
        "default": "custom-card",
        "info": "custom-card card-info",
        "success": "custom-card card-success",
        "warning": "custom-card card-warning"
    }

    st.markdown(f"""
    <div class='{card_class.get(card_type, "custom-card")}'>
        <h3 style='font-size: 18px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
            {icon} {title}
        </h3>
        <div style='font-size: 14px; color: #6B7280;'>
            {content}
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_upload_card(title, subtitle, file_key, file_types, is_optional=False):
    """
    Crea una card de carga de archivos compacta

    Args:
        title: T√≠tulo de la secci√≥n
        subtitle: Subt√≠tulo descriptivo
        file_key: Key √∫nica para el file_uploader
        file_types: Lista de tipos de archivo aceptados
        is_optional: Si es opcional mostrar label
    """
    optional_text = " (Opcional)" if is_optional else ""

    st.markdown(f"""
    <div class='upload-card'>
        <div style='margin-bottom: 12px;'>
            <div style='font-size: 16px; font-weight: 600; color: #0C147B;'>
                üìÑ {title}
            </div>
            <div style='font-size: 13px; color: #6B7280;'>
                {subtitle}{optional_text}
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    uploaded_file = st.file_uploader(
        f"Subir {title}",
        type=file_types,
        key=file_key,
        label_visibility="collapsed"
    )

    if uploaded_file:
        st.success(f"‚úÖ {uploaded_file.name} ({uploaded_file.size / 1024:.1f} KB)")

    return uploaded_file

def create_metric_card(value, label, highlight=False):
    """
    Crea una card de m√©trica compacta

    Args:
        value: Valor num√©rico a mostrar
        label: Etiqueta de la m√©trica
        highlight: Si debe destacarse (borde azul)
    """
    border_style = "border: 2px solid #3C47D3;" if highlight else "border: 1px solid #D1D5DB;"
    color = "#3C47D3" if highlight else "#6B7280"

    st.markdown(f"""
    <div style='background: white; {border_style} border-radius: 12px; padding: 20px; text-align: center;'>
        <div style='font-size: 36px; font-weight: 700; color: {color}; margin-bottom: 8px;'>
            {value:,}
        </div>
        <div style='font-size: 14px; color: #6B7280; font-weight: 600;'>
            {label}
        </div>
    </div>
    """, unsafe_allow_html=True)

# T√≠tulo principal compacto
st.markdown("""
    <div style='text-align: center; margin-bottom: 1.5rem;'>
        <h1 style='font-size: 32px; font-weight: 700; color: #050A53; margin-bottom: 0.5rem; margin-top: 0;'>
            üìä Sistema de Consolidaci√≥n de Facturas
        </h1>
        <p style='font-size: 14px; color: #6B7280; margin: 0;'>
            Sistema para consolidar facturas de Noova y Netsuite
        </p>
    </div>
""", unsafe_allow_html=True)

# Sidebar con dise√±o mejorado
with st.sidebar:
    st.markdown("### üîê Google Drive")

    # Verificar si hay credenciales configuradas
    try:
        client_id = st.secrets.get("client_id", "")
        client_secret = st.secrets.get("client_secret", "")

        if client_id and client_secret:
            # Estado: Credenciales configuradas
            st.markdown("""
                <div class='status-badge-success' style='width: 100%; text-align: center; margin-bottom: 12px;'>
                    ‚úÖ Credenciales configuradas
                </div>
            """, unsafe_allow_html=True)

            # Verificar si est√° autenticado
            if 'google_drive_creds' in st.session_state:
                st.markdown("""
                    <div class='status-badge-success' style='width: 100%; text-align: center; margin-bottom: 12px;'>
                        üîó Conectado a Drive
                    </div>
                """, unsafe_allow_html=True)

                # Bot√≥n para desconectar
                if st.button("üîì Desconectar", use_container_width=True, key="btn_disconnect"):
                    # Eliminar credenciales del session state
                    if 'google_drive_creds' in st.session_state:
                        del st.session_state.google_drive_creds
                    if 'drive_manager' in st.session_state:
                        del st.session_state.drive_manager

                    # Eliminar archivo de token persistente
                    import os
                    if os.path.exists('token.json'):
                        os.remove('token.json')

                    st.rerun()
            else:
                st.markdown("""
                    <div class='status-badge-warning' style='width: 100%; text-align: center; margin-bottom: 12px;'>
                        ‚ö†Ô∏è No autorizado
                    </div>
                """, unsafe_allow_html=True)
                st.caption("üëâ Ve a 'Reportes desde Master' para conectar")
        else:
            st.error("‚ùå Faltan credenciales")
            with st.expander("üìñ ¬øC√≥mo configurar?"):
                st.code("""
# En .streamlit/secrets.toml
client_id = "tu-client-id"
client_secret = "tu-client-secret"
                """)
    except Exception as e:
        st.error("‚ùå Error en configuraci√≥n")
        st.caption(str(e))

    # Mostrar info de datos procesados con dise√±o mejorado
    st.markdown("<div style='margin-top: 1.5rem;'></div>", unsafe_allow_html=True)
    st.markdown("### üìä Datos Procesados")

    if st.session_state.processed and st.session_state.stats:
        # M√©tricas con cards mejoradas
        total_facturas = st.session_state.stats.get('total_facturas', 0)
        facturas_sin_valor = st.session_state.stats.get('sin_valor', 0)

        st.markdown(f"""
            <div style='background: white; border: 1px solid #D1D5DB; border-radius: 12px; padding: 16px; margin-bottom: 12px; text-align: center;'>
                <div style='font-size: 32px; font-weight: 700; color: #0C147B;'>{total_facturas:,}</div>
                <div style='font-size: 14px; color: #6B7280; font-weight: 600;'>Total Facturas</div>
            </div>
        """, unsafe_allow_html=True)

        badge_color = "#10B981" if facturas_sin_valor == 0 else "#F59E0B"
        badge_bg = "#D1FAE5" if facturas_sin_valor == 0 else "#FEF3C7"
        badge_text = "‚úì Todo OK" if facturas_sin_valor == 0 else "‚ö† Revisar"

        st.markdown(f"""
            <div style='background: white; border: 1px solid #D1D5DB; border-radius: 12px; padding: 16px; text-align: center;'>
                <div style='font-size: 32px; font-weight: 700; color: #0C147B;'>{facturas_sin_valor:,}</div>
                <div style='font-size: 14px; color: #6B7280; font-weight: 600; margin-bottom: 8px;'>Facturas sin valor</div>
                <div style='background: {badge_bg}; color: {badge_color}; padding: 4px 12px; border-radius: 6px; font-size: 12px; font-weight: 600; display: inline-block;'>
                    {badge_text}
                </div>
            </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
            <div style='background: #F3F4F6; border: 1px solid #D1D5DB; border-radius: 8px; padding: 16px; text-align: center;'>
                <div style='font-size: 14px; color: #6B7280;'>üìÇ No hay datos procesados</div>
            </div>
        """, unsafe_allow_html=True)

# ==================== FUNCIONES DE RENDERIZADO POR SECCI√ìN ====================

def render_file_upload_section():
    """Secci√≥n de carga de archivos Excel"""
    # Header compacto
    st.markdown("## üìÅ Carga de Archivos Excel")
    st.markdown("Carga los archivos de Netsuite y Noova para generar el reporte consolidado")

    # Grid 2x2 usando containers y gap peque√±o
    with st.container():
        col1, col2 = st.columns(2, gap="medium")

        with col1:
            # Usar helper function para crear upload card
            archivo_netsuite = create_upload_card(
                title="Netsuite Facturas",
                subtitle="Sistema contable - Facturas",
                file_key="netsuite",
                file_types=["xls", "xlsx"],
                is_optional=False
            )

        with col2:
            # Usar helper function para crear upload card
            archivo_netsuite_nc = create_upload_card(
                title="Netsuite Notas Cr√©dito",
                    subtitle="Sistema contable - Notas de cr√©dito",
                    file_key="netsuite_nc",
                    file_types=["xls", "xlsx"],
                    is_optional=True
                )

        # Segunda fila
        with st.container():
            col3, col4 = st.columns(2, gap="medium")

            with col3:
                # Usar helper function para crear upload card
                archivo_facturas = create_upload_card(
                    title="Noova Facturas",
                    subtitle="Sistema de facturaci√≥n - Facturas emitidas",
                    file_key="facturas",
                    file_types=["xlsx"],
                    is_optional=False
                )

            with col4:
                # Usar helper function para crear upload card
                archivo_notas = create_upload_card(
                    title="Noova Notas Cr√©dito",
                    subtitle="Sistema de facturaci√≥n - Notas de cr√©dito",
                    file_key="notas_credito",
                    file_types=["xlsx"],
                    is_optional=True
                )

        # Validaci√≥n de parejas de archivos - m√°s compacta
        st.markdown("<div style='margin-top: 1.5rem;'></div>", unsafe_allow_html=True)
        create_card(
            title="Validaci√≥n de Archivos",
            content="Verifica que hayas cargado los archivos necesarios antes de procesar",
            card_type="info",
            icon="‚úÖ"
        )

        # Pareja 1: Facturas (obligatoria)
        pareja_facturas_ok = archivo_netsuite and archivo_facturas
        pareja_facturas_incompleta = (archivo_netsuite and not archivo_facturas) or (not archivo_netsuite and archivo_facturas)

        # Pareja 2: Notas Cr√©dito (opcional, pero deben ir juntas)
        pareja_nc_ok = (archivo_netsuite_nc and archivo_notas) or (not archivo_netsuite_nc and not archivo_notas)
        pareja_nc_incompleta = (archivo_netsuite_nc and not archivo_notas) or (not archivo_netsuite_nc and archivo_notas)

        # Usar container para validaci√≥n compacta
        with st.container():
            col_status, col_btn = st.columns([2, 1])

            with col_status:
                # Pareja 1: Facturas
                if pareja_facturas_ok:
                    st.success("‚úÖ **Pareja 1:** Facturas Netsuite + Noova")
                elif pareja_facturas_incompleta:
                    st.error("‚ùå **Pareja 1:** Facturas incompleta")
                    if archivo_netsuite and not archivo_facturas:
                        st.caption("‚Üí Tienes Netsuite Facturas pero falta Noova Facturas")
                    elif archivo_facturas and not archivo_netsuite:
                        st.caption("‚Üí Tienes Noova Facturas pero falta Netsuite Facturas")
                else:
                    st.warning("‚ö†Ô∏è **Pareja 1:** Facturas (obligatoria)")
                    st.caption("‚Üí Debes cargar Netsuite Facturas + Noova Facturas")

                # Pareja 2: Notas Cr√©dito
                if archivo_netsuite_nc and archivo_notas:
                    st.success("‚úÖ **Pareja 2:** Notas Cr√©dito Netsuite + Noova")
                elif pareja_nc_incompleta:
                    st.error("‚ùå **Pareja 2:** Notas Cr√©dito incompleta")
                    if archivo_netsuite_nc and not archivo_notas:
                        st.caption("‚Üí Tienes Netsuite NC pero falta Noova NC")
                    elif archivo_notas and not archivo_netsuite_nc:
                        st.caption("‚Üí Tienes Noova NC pero falta Netsuite NC")
                else:
                    st.info("‚ÑπÔ∏è **Pareja 2:** Notas Cr√©dito (opcional)")
                    st.caption("‚Üí Si cargas NC, debes cargar ambos archivos")

            with col_btn:
                st.markdown("<div style='height: 20px;'></div>", unsafe_allow_html=True)

                # Listo para procesar si: Pareja 1 OK y Pareja 2 OK (o vac√≠a)
                listo_para_procesar = pareja_facturas_ok and pareja_nc_ok

                if st.button(
                    "üöÄ Procesar Archivos",
                    type="primary",
                    use_container_width=True,
                    disabled=not listo_para_procesar,
                    key="btn_procesar_archivos"
                ):
                    # Validaciones con mensajes claros
                    if not pareja_facturas_ok:
                        st.error("‚ùå **Error: Pareja de Facturas incompleta**")
                        st.warning("üìã Debes cargar **ambos archivos**:\n- Netsuite Facturas (.xls/.xlsx)\n- Noova Facturas (.xlsx)")
                    elif not pareja_nc_ok:
                        st.error("‚ùå **Error: Pareja de Notas Cr√©dito incompleta**")
                        st.warning("üìã Si cargas Notas Cr√©dito, debes cargar **ambos archivos**:\n- Netsuite NC (.xls/.xlsx)\n- Noova NC (.xlsx)\n\nO **ninguno** de los dos.")
                    else:
                        with st.spinner("‚è≥ Procesando archivos... Esto puede tomar unos segundos."):
                            try:
                                # Crear directorio temporal
                                with tempfile.TemporaryDirectory() as tmpdir:
                                    # Guardar archivos temporalmente
                                    netsuite_path = os.path.join(tmpdir, archivo_netsuite.name)
                                    with open(netsuite_path, 'wb') as f:
                                        f.write(archivo_netsuite.getbuffer())

                                    facturas_path = os.path.join(tmpdir, archivo_facturas.name)
                                    with open(facturas_path, 'wb') as f:
                                        f.write(archivo_facturas.getbuffer())

                                    notas_path = None
                                    if archivo_notas:
                                        notas_path = os.path.join(tmpdir, archivo_notas.name)
                                        with open(notas_path, 'wb') as f:
                                            f.write(archivo_notas.getbuffer())

                                    # Guardar Netsuite NC si se carg√≥
                                    netsuite_nc_path = None
                                    if archivo_netsuite_nc:
                                        netsuite_nc_path = os.path.join(tmpdir, archivo_netsuite_nc.name)
                                        with open(netsuite_nc_path, 'wb') as f:
                                            f.write(archivo_netsuite_nc.getbuffer())

                                    # Inicializar procesador
                                    processor = FileProcessor(
                                        column_mapping_path='config/column_mapping.json',
                                        classification_rules_path='config/classification_rules.json'
                                    )

                                    # Leer archivos
                                    df_netsuite = processor.read_netsuite_file(netsuite_path)
                                    df_facturas = processor.read_noova_file(facturas_path, 'facturas')

                                    # Leer Noova Notas Cr√©dito (opcional)
                                    df_notas = None
                                    if notas_path:
                                        df_notas = processor.read_noova_file(notas_path, 'notas_credito')

                                    # Leer Netsuite Notas Cr√©dito (opcional)
                                    df_netsuite_nc = None
                                    if netsuite_nc_path:
                                        df_netsuite_nc = processor.read_netsuite_nc_file(netsuite_nc_path)

                                    # Consolidar
                                    df_consolidated = processor.consolidate_data(
                                        df_netsuite,
                                        df_facturas,
                                        df_notas,
                                        df_netsuite_nc
                                    )

                                    # Preparar para archivo maestro
                                    datos_por_hoja = processor.prepare_for_master_sheet(df_consolidated)

                                    # Obtener estad√≠sticas
                                    stats = processor.get_statistics(df_consolidated)

                                    # Crear metadata del procesamiento
                                    metadata = {
                                        'fecha_procesamiento': datetime.now().isoformat(),
                                        'archivos_procesados': {
                                            'netsuite_facturas': archivo_netsuite.name,
                                            'netsuite_nc': archivo_netsuite_nc.name if archivo_netsuite_nc else None,
                                            'noova_facturas': archivo_facturas.name,
                                            'noova_nc': archivo_notas.name if archivo_notas else None
                                        },
                                        'usuario': 'Alejandro',
                                        'total_facturas': stats.get('total_facturas', 0),
                                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                                    }

                                    # Guardar en session_state
                                    st.session_state.consolidated_data = df_consolidated
                                    st.session_state.datos_por_hoja = datos_por_hoja
                                    st.session_state.stats = stats
                                    st.session_state.metadata = metadata
                                    st.session_state.processed = True

                                st.balloons()
                                st.success("‚úÖ ¬°Archivos procesados exitosamente!")

                                # Mostrar resumen
                                st.markdown("---")
                                st.markdown("### üìä Resumen del Procesamiento")

                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("Total Facturas", stats.get('total_facturas', 0))
                                with col2:
                                    st.metric("Facturas Sin Valor", stats.get('sin_valor', 0))
                                with col3:
                                    st.metric("Sin Clasificar", stats.get('sin_clasificar', 0))

                                st.info("üëâ Ve al Dashboard para ver an√°lisis detallado o a 'Generar Reporte' para descargar los datos")

                            except Exception as e:
                                st.error(f"‚ùå Error al procesar archivos: {str(e)}")
                                with st.expander("Ver detalles del error"):
                                    st.exception(e)

    # ==================== TAB 3: GENERAR REPORTE ====================
    with tab3:
        # Header mejorado
        st.markdown("""
            <div style='margin-bottom: 2rem;'>
                <h2 style='font-size: 24px; font-weight: 600; color: #0C147B; margin-bottom: 0.5rem;'>
                    üìã Generaci√≥n de Reportes
                </h2>
                <p style='font-size: 14px; color: #6B7280;'>
                    Genera y descarga reportes consolidados o personalizados
                </p>
            </div>
        """, unsafe_allow_html=True)

        if not st.session_state.processed:
            st.markdown("""
                <div class='info-banner'>
                    <div style='font-size: 16px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                        ‚ÑπÔ∏è No hay datos procesados
                    </div>
                    <div style='font-size: 14px; color: #6B7280;'>
                        Ve a la pesta√±a "Carga de Archivos" y procesa los archivos primero para generar reportes
                    </div>
                </div>
            """, unsafe_allow_html=True)
        else:
            datos_por_hoja = st.session_state.datos_por_hoja

            # ARCHIVO MAESTRO COMPLETO - DISE√ëO MEJORADO
            st.markdown("""
                <div class='card-info' style='padding: 24px; margin-bottom: 24px;'>
                    <h3 style='font-size: 20px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                        üìÅ Archivo Maestro de Facturaci√≥n
                    </h3>
                    <p style='font-size: 14px; color: #6B7280; margin-bottom: 0;'>
                        Genera archivo Excel completo con todas las facturas en 2 hojas (Costos Fijos y Mandato)
                    </p>
                </div>
            """, unsafe_allow_html=True)

            # Generar archivo Excel
            timestamp = datetime.now().strftime('%Y-%m-%d_%H%M%S')
            file_name = f"Maestro_Facturacion_{timestamp}.xlsx"

            buffer_maestro = BytesIO()
            with pd.ExcelWriter(buffer_maestro, engine='openpyxl') as writer:
                for hoja_nombre, hoja_df in datos_por_hoja.items():
                    # Excel tiene l√≠mite de 31 caracteres para nombres de hoja
                    sheet_name = hoja_nombre[:31] if len(hoja_nombre) > 31 else hoja_nombre
                    hoja_df.to_excel(writer, sheet_name=sheet_name, index=False)

            file_bytes = buffer_maestro.getvalue()

            # Botones de acci√≥n con dise√±o mejorado
            col_btn1, col_btn2 = st.columns(2)

            with col_btn1:
                st.markdown("""
                    <div style='background: #F5F8FE; border: 1px solid #77A1E2; border-radius: 8px; padding: 16px; margin-bottom: 12px;'>
                        <div style='font-size: 16px; font-weight: 600; color: #0C147B; margin-bottom: 4px;'>
                            ‚òÅÔ∏è Generar y Subir a Drive
                        </div>
                        <div style='font-size: 13px; color: #6B7280;'>
                            Sube autom√°ticamente a Google Drive (recomendado)
                        </div>
                    </div>
                """, unsafe_allow_html=True)

                if st.button("‚òÅÔ∏è Generar y Subir a Google Drive", type="primary", use_container_width=True, key="btn_generar_subir_master"):
                    drive_manager = get_drive_manager()

                    if drive_manager and drive_manager.is_authenticated():
                        with st.spinner("üì§ Subiendo archivos a Google Drive..."):
                            # Crear/obtener carpeta "Reportes Facturaci√≥n" dentro de finkargo
                            folder_id = drive_manager.create_folder_if_not_exists(drive_manager.FOLDER_REPORTES)

                            if folder_id:
                                # Subir archivo Excel a la carpeta "Reportes Facturaci√≥n"
                                result = drive_manager.upload_file(file_bytes, file_name, folder_id)

                                if result:
                                    st.success(f"‚úÖ ¬°Archivo Excel subido exitosamente a 'finkargo/{drive_manager.FOLDER_REPORTES}'!")

                                    # Guardar snapshot de datos procesados para poder cargarlos despu√©s
                                    with st.spinner("üíæ Guardando snapshot de datos procesados..."):
                                        data_result = drive_manager.save_processed_data(
                                            consolidated_data=st.session_state.consolidated_data,
                                            datos_por_hoja=datos_por_hoja,
                                            stats=st.session_state.stats,
                                            metadata=st.session_state.metadata if st.session_state.metadata else {},
                                            folder_id=folder_id
                                        )

                                        if data_result:
                                            st.success("‚úÖ ¬°Snapshot de datos guardado! Podr√°s cargar este reporte m√°s tarde.")
                                        else:
                                            st.warning("‚ö†Ô∏è No se pudo guardar el snapshot de datos (no afecta el Excel)")

                                    st.markdown("---")

                                    st.markdown(f"**üìÑ Archivo:** {result['nombre']}")
                                    st.markdown(f"**üì¶ Tama√±o:** {result['tamano']}")
                                    st.markdown(f"**üìÖ Fecha:** {timestamp}")
                                    st.markdown(f"**üìÇ Ubicaci√≥n:** finkargo/{drive_manager.FOLDER_REPORTES}")

                                    st.link_button(
                                        "üîó Abrir en Google Drive",
                                        result['link'],
                                        use_container_width=True
                                    )

                                    st.info("üí° El archivo est√° en modo SOLO LECTURA. Para trabajar, descarga una copia o dupl√≠calo en Drive.")
                                else:
                                    st.error("‚ùå Error al subir el archivo")
                            else:
                                st.error(f"‚ùå Error al crear/obtener carpeta '{drive_manager.FOLDER_REPORTES}' en Drive")
                    else:
                        st.warning("‚ö†Ô∏è Conecta con Google Drive primero")
                        st.caption("Ve a la pesta√±a 'Buscar en Drive' para autenticarte")

            with col_btn2:
                st.markdown("""
                    <div style='background: #F9FAFB; border: 1px solid #D1D5DB; border-radius: 8px; padding: 16px; margin-bottom: 12px;'>
                        <div style='font-size: 16px; font-weight: 600; color: #0C147B; margin-bottom: 4px;'>
                            üíæ Descargar Copia Local
                        </div>
                        <div style='font-size: 13px; color: #6B7280;'>
                            Descarga el archivo a tu computadora
                        </div>
                    </div>
                """, unsafe_allow_html=True)

                st.download_button(
                    label="üíæ Descargar Copia Local",
                    data=file_bytes,
                    file_name=file_name,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True,
                    key="btn_descargar_local_master"
                )

            # Nota informativa
            st.markdown("""
                <div style='background: #FEF3C7; border-left: 4px solid #F59E0B; border-radius: 6px; padding: 12px; margin-top: 16px;'>
                    <div style='display: flex; align-items: center; gap: 8px;'>
                        <div style='font-size: 20px;'>üí°</div>
                        <div style='font-size: 13px; color: #92400E;'>
                            Al descargar creas una copia local que puede quedar desactualizada. Se recomienda usar Google Drive como fuente √∫nica de verdad.
                        </div>
                    </div>
                </div>
            """, unsafe_allow_html=True)

            # REPORTES PERSONALIZADOS - DISE√ëO MEJORADO
            st.markdown("<div style='margin-top: 2rem;'></div>", unsafe_allow_html=True)
            st.markdown("""
                <div class='card-info' style='padding: 24px; margin-top: 32px; margin-bottom: 24px;'>
                    <h3 style='font-size: 20px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                        üîç Generar Reportes Personalizados
                    </h3>
                    <p style='font-size: 14px; color: #6B7280; margin-bottom: 0;'>
                        Filtra y descarga reportes espec√≠ficos por c√≥digo de desembolso, moneda o tipo de factura
                    </p>
                </div>
            """, unsafe_allow_html=True)

            # Agregar opci√≥n "Todas las Facturas"
            opciones_hojas = ["üìä Todas las Facturas (Consolidado)"] + list(datos_por_hoja.keys())

            hoja_seleccionada = st.selectbox(
                "Seleccionar b√∫squeda:",
                opciones_hojas,
                help="Selecciona qu√© facturas quieres consultar"
            )

            # Determinar qu√© DataFrame mostrar
            if hoja_seleccionada == "üìä Todas las Facturas (Consolidado)":
                # Combinar todas las hojas
                dfs_a_combinar = []
                for nombre_hoja, df_hoja_temp in datos_por_hoja.items():
                    df_temp = df_hoja_temp.copy()
                    df_temp['Hoja Origen'] = nombre_hoja  # Agregar columna de origen
                    dfs_a_combinar.append(df_temp)

                df_hoja = pd.concat(dfs_a_combinar, ignore_index=True)

            elif hoja_seleccionada in datos_por_hoja:
                df_hoja = datos_por_hoja[hoja_seleccionada]

            else:
                df_hoja = None

            if df_hoja is not None and not df_hoja.empty:
                # Filtros con dise√±o mejorado
                st.markdown("""
                    <div style='background: #F5F8FE; border: 1px solid #77A1E2; border-radius: 12px; padding: 20px; margin-bottom: 24px;'>
                        <h3 style='font-size: 18px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                            üéØ Filtros
                        </h3>
                        <p style='font-size: 13px; color: #6B7280; margin-bottom: 0;'>
                            Filtra por tipo de factura, desembolso o moneda
                        </p>
                    </div>
                """, unsafe_allow_html=True)

                # Si es vista consolidada, agregar filtro por hoja origen
                if hoja_seleccionada == "üìä Todas las Facturas (Consolidado)":
                    col_hoja_filtro = st.columns(1)[0]
                    with col_hoja_filtro:
                        hojas_origen = ['Todas'] + sorted(df_hoja['Hoja Origen'].unique().tolist())
                        hoja_origen_filtro = st.selectbox(
                            "üóÇÔ∏è Filtrar por tipo de factura:",
                            hojas_origen,
                            help="Filtra por hoja de origen (Costos Fijos o Mandato)"
                        )
                else:
                    hoja_origen_filtro = None

                col1, col2 = st.columns(2)

                with col1:
                    # Filtro por c√≥digo de desembolso
                    if 'Codigo del desembolso' in df_hoja.columns:
                        # Limpiar y normalizar c√≥digos
                        codigos_disponibles = [str(c).strip() for c in df_hoja['Codigo del desembolso'].unique() if pd.notna(c) and str(c).strip()]
                        codigos_disponibles = sorted(codigos_disponibles)

                        # Debug: mostrar total de c√≥digos √∫nicos
                        st.caption(f"üí° {len(codigos_disponibles)} c√≥digos √∫nicos disponibles")
                    else:
                        codigos_disponibles = []

                    codigo_filtro = st.multiselect(
                        "C√≥digos de Desembolso",
                        options=codigos_disponibles,
                        default=[],
                        help="Deja vac√≠o para incluir todos"
                    )

                with col2:
                    # Filtro por moneda
                    if 'Moneda' in df_hoja.columns:
                        monedas = [str(m) for m in df_hoja['Moneda'].unique() if pd.notna(m)]
                        monedas = sorted(monedas)
                    else:
                        monedas = []

                    moneda_filtro = st.multiselect(
                        "Moneda",
                        options=monedas,
                        default=[],
                        help="Deja vac√≠o para incluir todas"
                    )
            
                # Aplicar filtros
                df_filtrado = df_hoja.copy()

                # Filtro por hoja origen (solo en vista consolidada)
                if hoja_origen_filtro and hoja_origen_filtro != 'Todas' and 'Hoja Origen' in df_filtrado.columns:
                    df_filtrado = df_filtrado[df_filtrado['Hoja Origen'] == hoja_origen_filtro]

                if codigo_filtro:
                    # Normalizar la columna y el filtro (trim espacios)
                    df_filtrado['_codigo_normalizado'] = df_filtrado['Codigo del desembolso'].astype(str).str.strip()
                    codigo_filtro_normalizado = [str(c).strip() for c in codigo_filtro]

                    df_filtrado = df_filtrado[df_filtrado['_codigo_normalizado'].isin(codigo_filtro_normalizado)]
                    df_filtrado = df_filtrado.drop(columns=['_codigo_normalizado'])

                    # Debug: mostrar resultados
                    st.info(f"üîç Filtrando por {len(codigo_filtro)} c√≥digo(s): {', '.join(codigo_filtro[:3])}{'...' if len(codigo_filtro) > 3 else ''}")

                if moneda_filtro and 'Moneda' in df_filtrado.columns:
                    # Convertir a string para comparaci√≥n
                    df_filtrado = df_filtrado[df_filtrado['Moneda'].astype(str).str.strip().isin(moneda_filtro)]

                if len(df_filtrado) < len(df_hoja):
                    st.success(f"‚úÖ Filtros aplicados: {len(df_filtrado)} de {len(df_hoja)} registros")
                elif codigo_filtro or moneda_filtro or (hoja_origen_filtro and hoja_origen_filtro != 'Todas'):
                    st.warning(f"‚ö†Ô∏è No se encontraron resultados con los filtros seleccionados")

                # Contador de facturas seleccionadas con dise√±o mejorado
                st.markdown("<div style='margin-top: 1.5rem;'></div>", unsafe_allow_html=True)
                st.markdown(f"""
                    <div style='background: white; border: 2px solid #3C47D3; border-radius: 12px; padding: 24px; margin: 24px 0; text-align: center;'>
                        <div style='font-size: 48px; font-weight: 700; color: #3C47D3; margin-bottom: 8px;'>
                            {len(df_filtrado):,}
                        </div>
                        <div style='font-size: 16px; color: #6B7280; font-weight: 600;'>
                            Facturas seleccionadas
                        </div>
                    </div>
                """, unsafe_allow_html=True)

                # Opciones de exportaci√≥n
                st.markdown("<div style='margin-top: 1.5rem;'></div>", unsafe_allow_html=True)
                st.markdown("""
                    <div style='margin-bottom: 16px;'>
                        <h3 style='font-size: 18px; font-weight: 600; color: #0C147B;'>
                            üíæ Descargar
                        </h3>
                    </div>
                """, unsafe_allow_html=True)

                # Nombre de archivo seg√∫n vista y filtros aplicados
                if codigo_filtro:
                    # Si hay filtro de c√≥digo, usar el c√≥digo en el nombre del archivo
                    if len(codigo_filtro) == 1:
                        # Un solo c√≥digo: usar el c√≥digo directamente
                        codigo_limpio = str(codigo_filtro[0]).replace(":", "_").replace("/", "_")
                        nombre_archivo = f"Factura_{codigo_limpio}"
                        nombre_hoja_excel = codigo_limpio[:31]
                    else:
                        # M√∫ltiples c√≥digos: usar "Multiples_codigos" + cantidad
                        nombre_archivo = f"Facturas_Multiples_{len(codigo_filtro)}_codigos"
                        nombre_hoja_excel = "Multiples_Codigos"
                elif hoja_seleccionada == "üìä Todas las Facturas (Consolidado)":
                    nombre_archivo = "Consolidado_Todas_Facturas"
                    nombre_hoja_excel = "Consolidado"
                else:
                    nombre_archivo = hoja_seleccionada.replace(" ", "_")
                    nombre_hoja_excel = hoja_seleccionada[:31]  # Excel limita a 31 caracteres

                col1, col2, col3 = st.columns(3)

                with col1:
                    # Descargar Excel
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df_filtrado.to_excel(writer, sheet_name=nombre_hoja_excel, index=False)

                    st.download_button(
                        label="üì• Descargar Excel",
                        data=buffer.getvalue(),
                        file_name=f"{nombre_archivo}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )

                with col2:
                    # Descargar CSV
                    csv = df_filtrado.to_csv(index=False)
                    st.download_button(
                        label="üì• Descargar CSV",
                        data=csv,
                        file_name=f"{nombre_archivo}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv",
                        use_container_width=True
                    )
            
                with col3:
                    # Placeholder para Google Sheets
                    if st.button("üì§ Subir a Google Sheets", use_container_width=True):
                        st.info("üöß Funcionalidad en desarrollo (Fase 2)")
            
                # B√∫squeda de PDFs en Drive
                st.markdown("<div style='margin-top: 2rem;'></div>", unsafe_allow_html=True)

                st.markdown("""
                    <div style='background: #F5F8FE; border: 1px solid #77A1E2; border-radius: 12px; padding: 20px; margin-bottom: 16px;'>
                        <h3 style='font-size: 18px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                            üìé PDFs Asociados
                        </h3>
                        <p style='font-size: 13px; color: #6B7280; margin-bottom: 0;'>
                            Busca autom√°ticamente los PDFs de las facturas del reporte
                        </p>
                    </div>
                """, unsafe_allow_html=True)

                if st.button("üîç Buscar PDFs de este reporte", type="primary", use_container_width=True, key="btn_buscar_pdfs_reporte"):
                    drive_manager = get_drive_manager()

                    if drive_manager and drive_manager.is_authenticated():
                        # Extraer n√∫meros de factura del reporte filtrado
                        if '# Factura' in df_filtrado.columns:
                            numeros_factura = df_filtrado['# Factura'].dropna().unique().tolist()

                            st.info(f"üîç Buscando {len(numeros_factura)} PDFs en carpeta '{drive_manager.FOLDER_FACTURAS_PDF}'...")

                            with st.spinner("Buscando..."):
                                # Usar el nuevo m√©todo que busca espec√≠ficamente en "Facturas PDF"
                                invoices_found = drive_manager.search_pdfs_in_facturas_folder(numeros_factura)

                                found = [inv for inv in invoices_found if inv.get('encontrado')]
                                not_found = [inv for inv in invoices_found if not inv.get('encontrado')]

                                if found:
                                    st.success(f"‚úÖ {len(found)} PDFs encontrados")

                                    # Bot√≥n descarga masiva
                                    if st.button(f"‚¨áÔ∏è Descargar todos ({len(found)}) en ZIP", key="zip_reportes"):
                                        with st.spinner("Preparando descarga..."):
                                            zip_content = drive_manager.download_multiple_files(found)
                                            if zip_content:
                                                st.download_button(
                                                    label=f"üì• Descargar ZIP",
                                                    data=zip_content,
                                                    file_name=f"Facturas_Reporte_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                                                    mime="application/zip",
                                                    use_container_width=True
                                                )

                                if not_found:
                                    st.warning(f"‚ö†Ô∏è {len(not_found)} facturas no encontradas en carpeta '{drive_manager.FOLDER_FACTURAS_PDF}'")
                        else:
                            st.error("‚ùå La columna '# Factura' no existe en los datos")
                    else:
                        st.warning("‚ö†Ô∏è Conecta con Google Drive en la pesta√±a 'Buscar en Drive' primero")

                st.markdown("---")

                # Vista previa - Colapsada por defecto
                st.markdown("<div style='margin-top: 1.5rem;'></div>", unsafe_allow_html=True)
                with st.expander("üëÄ Vista Previa (click para expandir)", expanded=False):
                    st.dataframe(df_hoja.head(10), use_container_width=True)
                    st.caption(f"Mostrando las primeras 10 filas de {len(df_hoja):,} total")

                # Herramientas Debug - Colapsadas por defecto
                with st.expander("üîß Herramientas Debug (click para expandir)", expanded=False):
                    if 'Codigo del desembolso' in df_hoja.columns:
                        st.markdown("### üîç C√≥digos de Desembolso Disponibles")
                        codigos_unicos = df_hoja['Codigo del desembolso'].unique()
                        st.write(f"Total: {len(codigos_unicos)} c√≥digos √∫nicos")
                        st.dataframe(pd.DataFrame({
                            'C√≥digo': [str(c) for c in codigos_unicos if pd.notna(c)]
                        }), use_container_width=True)

            # Historial de archivos maestros - Al final
            drive_manager = get_drive_manager()
            if drive_manager and drive_manager.is_authenticated():
                with st.expander("üìö Historial de Archivos Generados (click para expandir)", expanded=False):
                    with st.spinner("Cargando historial..."):
                        # Obtener/crear carpeta "Reportes Facturaci√≥n"
                        folder_id = drive_manager.create_folder_if_not_exists(drive_manager.FOLDER_REPORTES)
                        archivos_anteriores = drive_manager.list_master_files(folder_id, limit=10)

                        if archivos_anteriores:
                            st.info(f"üìä Se encontraron {len(archivos_anteriores)} archivos anteriores")

                            for archivo in archivos_anteriores:
                                col_a, col_b, col_c = st.columns([3, 1, 1])

                                with col_a:
                                    st.markdown(f"üìÑ **{archivo['nombre']}**")
                                    st.caption(f"Creado: {archivo['fecha_creacion'][:10]} | Tama√±o: {archivo['tamano']}")

                                with col_b:
                                    # Solo mostrar bot√≥n si hay link v√°lido
                                    link = archivo.get('link', '').strip()
                                    if link and link.startswith('http') and len(link) > 10:
                                        try:
                                            st.link_button(
                                                "üëÅÔ∏è Ver",
                                                link
                                            )
                                        except:
                                            st.caption("-")
                                    else:
                                        st.caption("-")

                                with col_c:
                                    file_content = drive_manager.download_file(archivo['id'], archivo['nombre'])
                                    if file_content:
                                        st.download_button(
                                            "‚¨áÔ∏è",
                                            file_content,
                                            archivo['nombre'],
                                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                            key=f"dl_{archivo['id']}"
                                        )

                                st.markdown("---")
                        else:
                            st.info("No hay archivos anteriores")
            else:
                st.info("üí° Conecta con Google Drive para ver el historial de archivos")

# ==================== MAIN TAB 2: REPORTES DESDE MASTER ====================
with main_tab2:
    # Header mejorado
    st.markdown("""
        <div style='margin-bottom: 2rem;'>
            <h2 style='font-size: 24px; font-weight: 600; color: #0C147B; margin-bottom: 0.5rem;'>
                üìä Reportes desde Archivo Master
            </h2>
            <p style='font-size: 14px; color: #6B7280;'>
                Consulta el archivo Master hist√≥rico con filtros avanzados
            </p>
        </div>
    """, unsafe_allow_html=True)

    # Banner informativo mejorado
    st.markdown("""
        <div class='info-banner'>
            <div style='display: flex; align-items: center; gap: 12px;'>
                <div style='font-size: 24px;'>üí°</div>
                <div>
                    <div style='font-size: 15px; font-weight: 600; color: #0C147B; margin-bottom: 4px;'>
                        Consulta el archivo Master hist√≥rico (2021-presente)
                    </div>
                    <div style='font-size: 13px; color: #6B7280;'>
                        Filtra por NIT y c√≥digo de desembolso para generar reportes espec√≠ficos
                    </div>
                </div>
            </div>
        </div>
    """, unsafe_allow_html=True)

    drive_manager = get_drive_manager()

    if not drive_manager or not drive_manager.is_authenticated():
        st.warning("‚ö†Ô∏è Conecta con Google Drive primero")
        st.caption("Ve a la pesta√±a 'Generar Reporte' > 'Buscar en Drive' para autenticarte")
    else:
        # Conectar y cargar archivo Master
        st.markdown("<div style='margin-top: 1rem;'></div>", unsafe_allow_html=True)
        st.markdown("""
            <div class='card-info' style='padding: 20px; margin-bottom: 16px;'>
                <h3 style='font-size: 18px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                    üìÅ Archivo Master
                </h3>
            </div>
        """, unsafe_allow_html=True)

        with st.spinner("üîç Buscando archivo Master en Drive..."):
            master_metadata = drive_manager.get_master_file_metadata()

        if not master_metadata:
            st.error("‚ùå No se encontr√≥ el archivo Master en la carpeta 'Facturaci√≥n'")
            st.info(f"üìÇ Archivo esperado: **{drive_manager.MASTER_FILE_NAME}**")
            st.caption(f"Ubicaci√≥n: finkargo/{drive_manager.FOLDER_FACTURACION}")
        else:
            # Mostrar informaci√≥n del archivo Master con dise√±o mejorado
            st.markdown(f"""
                <div style='background: white; border: 1px solid #D1D5DB; border-radius: 12px; padding: 20px; margin-bottom: 16px;'>
                    <div style='display: flex; align-items: center; gap: 16px; margin-bottom: 16px;'>
                        <div style='font-size: 48px;'>üìÑ</div>
                        <div style='flex: 1;'>
                            <div style='font-size: 16px; font-weight: 600; color: #0C147B; margin-bottom: 4px;'>
                                {master_metadata['nombre'][:50]}{'...' if len(master_metadata['nombre']) > 50 else ''}
                            </div>
                            <div style='font-size: 13px; color: #6B7280;'>
                                üì¶ Tama√±o: {master_metadata['tamano']} | üìÖ √öltima modificaci√≥n: {master_metadata['ultima_modificacion'][:10] if master_metadata['ultima_modificacion'] else 'N/A'}
                            </div>
                        </div>
                    </div>
                </div>
            """, unsafe_allow_html=True)

            # Link para ver el archivo
            if master_metadata.get('link'):
                st.link_button(
                    "üîó Ver Archivo Master en Drive",
                    master_metadata['link'],
                    use_container_width=True
                )

            # Bot√≥n para cargar datos
            st.markdown("<div style='margin-top: 1rem;'></div>", unsafe_allow_html=True)
            if st.button("üì• Cargar Datos del Master", type="primary", use_container_width=True, key="btn_cargar_master"):
                with st.spinner("‚è≥ Descargando y procesando archivo Master... Esto puede tomar unos segundos."):
                    dataframes_master = drive_manager.read_master_file()

                    if dataframes_master:
                        # Guardar en session_state
                        st.session_state.master_data = dataframes_master
                        st.session_state.master_loaded = True

                        st.balloons()
                        st.success("‚úÖ ¬°Archivo Master cargado exitosamente!")
                    else:
                        st.error("‚ùå Error al cargar el archivo Master")

            # Filtros y generaci√≥n de reportes (solo si hay datos cargados)
            st.markdown("<div style='margin-top: 1.5rem;'></div>", unsafe_allow_html=True)
            if st.session_state.get('master_loaded') and st.session_state.get('master_data'):
                st.markdown("""
                    <div style='background: #F5F8FE; border: 1px solid #77A1E2; border-radius: 12px; padding: 20px; margin-bottom: 24px;'>
                        <h3 style='font-size: 18px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                            üéØ Filtros para Generar Reporte
                        </h3>
                        <p style='font-size: 13px; color: #6B7280; margin-bottom: 0;'>
                            Filtra por tipo de factura, NIT y c√≥digo de desembolso
                        </p>
                    </div>
                """, unsafe_allow_html=True)

                dataframes_master = st.session_state.master_data

                # Selector de tipo de factura (con opci√≥n Consolidado)
                hojas_disponibles = list(dataframes_master.keys())
                opciones_tipo = ["üìä Consolidado (Todas)"] + hojas_disponibles

                tipo_seleccionado = st.selectbox(
                    "üìã Tipo de factura:",
                    opciones_tipo,
                    help="Selecciona qu√© tipo de facturas quieres consultar"
                )

                # Determinar DataFrame seg√∫n selecci√≥n
                if tipo_seleccionado == "üìä Consolidado (Todas)":
                    # Consolidar todas las hojas
                    dfs_a_consolidar = []
                    for nombre_hoja, df_hoja in dataframes_master.items():
                        if df_hoja is not None and not df_hoja.empty:
                            df_temp = df_hoja.copy()
                            df_temp['Tipo Factura'] = nombre_hoja  # Agregar columna de tipo
                            dfs_a_consolidar.append(df_temp)

                    if not dfs_a_consolidar:
                        st.error("‚ùå No hay datos para consolidar")
                        df_seleccionado = pd.DataFrame()
                        nombre_seleccion = "Consolidado"
                    else:
                        try:
                            # Concatenar con axis=0 para unir filas
                            df_seleccionado = pd.concat(dfs_a_consolidar, axis=0, ignore_index=True, sort=False)
                            nombre_seleccion = "Consolidado"
                        except Exception as e:
                            st.error(f"‚ùå Error al consolidar: {str(e)}")
                            # Debug info
                            with st.expander("üîç Ver detalles para debug"):
                                st.write(f"N√∫mero de DataFrames a consolidar: {len(dfs_a_consolidar)}")
                                for i, df in enumerate(dfs_a_consolidar):
                                    st.write(f"DataFrame {i}: {df.shape} - Columnas: {len(df.columns)}")
                                    st.write(f"Tipos de datos: {df.dtypes.to_dict()}")
                            df_seleccionado = pd.DataFrame()
                            nombre_seleccion = "Consolidado"
                else:
                    df_seleccionado = dataframes_master[tipo_seleccionado].copy()
                    nombre_seleccion = tipo_seleccionado

                # Mostrar estad√≠stica
                st.caption(f"üìä {len(df_seleccionado):,} registros disponibles")

                st.markdown("---")

                # Filtros simplificados (solo NIT y C√≥digo) - REACTIVOS
                col_filtro1, col_filtro2 = st.columns(2)

                # Funci√≥n helper para normalizar NITs (maneja float y string)
                def normalizar_nit(valor):
                    """Convierte NIT a string limpio, manejando floats y strings"""
                    if pd.isna(valor):
                        return None
                    try:
                        # Si es float, convertir a int primero para quitar decimales
                        if isinstance(valor, float):
                            valor = int(valor)
                        # Convertir a string y limpiar
                        return str(valor).strip()
                    except:
                        return str(valor).strip() if str(valor).strip() else None

                # Detectar columnas antes de empezar
                columnas_nit_posibles = ['NIT', 'nit', 'NIT Cliente', 'Nit']
                columna_nit = None
                for col in columnas_nit_posibles:
                    if col in df_seleccionado.columns:
                        columna_nit = col
                        break

                # IMPORTANTE: Buscar TODAS las variaciones de c√≥digo de desembolso
                columnas_codigo_posibles = [
                    'Codigo del desembolso',
                    'C√≥digo del desembolso',  # Con tilde
                    'Codigo de desembolso',
                    'C√≥digo de desembolso',
                    'codigo del desembolso',
                    'C√≥digo',
                    'codigo',
                    'Codigo'
                ]

                # Encontrar TODAS las columnas de c√≥digo que existen
                columnas_codigo_encontradas = []
                for col in df_seleccionado.columns:
                    if any(posible.lower() == col.lower() for posible in columnas_codigo_posibles):
                        columnas_codigo_encontradas.append(col)

                # Usar la primera encontrada como referencia
                columna_codigo = columnas_codigo_encontradas[0] if columnas_codigo_encontradas else None

                # Normalizar columna NIT para filtrado consistente
                if columna_nit:
                    df_seleccionado['_NIT_normalizado'] = df_seleccionado[columna_nit].apply(normalizar_nit)

                # IMPORTANTE: Unificar TODAS las columnas de c√≥digo en una sola columna temporal
                # Esto resuelve el problema cuando diferentes hojas tienen nombres ligeramente diferentes
                if columnas_codigo_encontradas:
                    # Crear columna unificada combinando todos los valores de c√≥digo
                    df_seleccionado['_Codigo_unificado'] = None
                    for col_codigo in columnas_codigo_encontradas:
                        df_seleccionado['_Codigo_unificado'] = df_seleccionado['_Codigo_unificado'].fillna(df_seleccionado[col_codigo])

                    # Convertir a string y limpiar
                    df_seleccionado['_Codigo_unificado'] = df_seleccionado['_Codigo_unificado'].astype(str).str.strip()
                    df_seleccionado.loc[df_seleccionado['_Codigo_unificado'] == 'nan', '_Codigo_unificado'] = None

                with col_filtro1:
                    # Filtro por NIT
                    st.markdown("**üë§ Filtro por NIT del Cliente**")

                    if columna_nit:
                        nits_disponibles = [nit for nit in df_seleccionado['_NIT_normalizado'].dropna().unique() if nit]
                        nits_disponibles = sorted(nits_disponibles)

                        filtro_nit = st.multiselect(
                            "Seleccionar NIT(s)",
                            options=nits_disponibles,
                            default=[],
                            help="Selecciona uno o m√°s NITs para ver sus c√≥digos de desembolso",
                            key="filtro_nit_master"
                        )

                        st.caption(f"üí° {len(nits_disponibles)} NITs disponibles")
                    else:
                        st.warning("‚ö†Ô∏è No se encontr√≥ columna de NIT")
                        filtro_nit = []

                with col_filtro2:
                    # Filtro por C√≥digo de Desembolso (REACTIVO al filtro de NIT)
                    st.markdown("**üíº Filtro por C√≥digo de Desembolso**")

                    if columnas_codigo_encontradas:
                        # Si hay NITs seleccionados, filtrar los c√≥digos por esos NITs
                        if filtro_nit and columna_nit:
                            df_para_codigos = df_seleccionado[
                                df_seleccionado['_NIT_normalizado'].isin(filtro_nit)
                            ]
                            help_text = f"C√≥digos asociados a los {len(filtro_nit)} NIT(s) seleccionado(s)"
                        else:
                            df_para_codigos = df_seleccionado
                            help_text = "Selecciona primero un NIT para ver solo sus c√≥digos, o deja vac√≠o para todos"

                        # Usar columna unificada que combina todas las variaciones de c√≥digo
                        codigos_disponibles = [c for c in df_para_codigos['_Codigo_unificado'].dropna().unique() if c and str(c).strip() and str(c) != 'nan']
                        codigos_disponibles = sorted(codigos_disponibles)

                        filtro_codigo = st.multiselect(
                            "Seleccionar C√≥digo(s)",
                            options=codigos_disponibles,
                            default=[],
                            help=help_text,
                            key="filtro_codigo_master"
                        )

                        if filtro_nit:
                            st.caption(f"üí° {len(codigos_disponibles)} c√≥digos disponibles para el(los) NIT(s) seleccionado(s)")
                        else:
                            st.caption(f"üí° {len(codigos_disponibles)} c√≥digos disponibles en total")
                    else:
                        st.warning("‚ö†Ô∏è No se encontr√≥ columna de c√≥digo de desembolso")
                        filtro_codigo = []

                st.markdown("---")

                # Aplicar filtros
                df_filtrado = df_seleccionado.copy()

                # Aplicar filtro de NIT (usando columna normalizada)
                if filtro_nit and columna_nit:
                    df_filtrado = df_filtrado[df_filtrado['_NIT_normalizado'].isin(filtro_nit)]

                # Aplicar filtro de C√≥digo (usando columna unificada)
                if filtro_codigo and columnas_codigo_encontradas:
                    df_filtrado = df_filtrado[df_filtrado['_Codigo_unificado'].isin(filtro_codigo)]

                # Limpiar columnas temporales del resultado final
                columnas_temporales = ['_NIT_normalizado', '_Codigo_unificado']
                for col_temp in columnas_temporales:
                    if col_temp in df_filtrado.columns:
                        df_filtrado = df_filtrado.drop(columns=[col_temp])

                # ========== LIMPIEZA Y CONSOLIDACI√ìN DE COLUMNAS ==========
                def limpiar_columnas_reporte(df):
                    """Limpia, consolida y reorganiza columnas del reporte"""
                    df_clean = df.copy()

                    # 1. Eliminar columnas Unnamed
                    unnamed_cols = [col for col in df_clean.columns if 'Unnamed' in str(col) or col.startswith('Unnamed')]
                    df_clean = df_clean.drop(columns=unnamed_cols, errors='ignore')

                    # 2. Eliminar columnas innecesarias
                    columnas_eliminar = [
                        'Validacion Consecutivo', 'Revision', 'Estado', 'Envio',
                        'Fac de la nota Cr√©dito', 'Fecha Nota Credito', '# Nota Credito'
                    ]
                    df_clean = df_clean.drop(columns=columnas_eliminar, errors='ignore')

                    # 3. Unificar columnas de C√≥digo de desembolso
                    if 'C√≥digo del desembolso' in df_clean.columns and 'Codigo del desembolso' in df_clean.columns:
                        # Combinar ambas columnas
                        df_clean['Codigo del desembolso'] = df_clean['Codigo del desembolso'].fillna(df_clean['C√≥digo del desembolso'])
                        df_clean = df_clean.drop(columns=['C√≥digo del desembolso'], errors='ignore')
                    elif 'C√≥digo del desembolso' in df_clean.columns:
                        df_clean = df_clean.rename(columns={'C√≥digo del desembolso': 'Codigo del desembolso'})

                    # 4. Unificar columnas de Fecha (consolidar en "Fecha Factura")
                    columnas_fecha = ['Fecha Factura', 'Fecha Facturacion', 'Fecha de desembolso']
                    fecha_principal = None
                    for col_fecha in columnas_fecha:
                        if col_fecha in df_clean.columns:
                            if fecha_principal is None:
                                fecha_principal = col_fecha
                                df_clean = df_clean.rename(columns={col_fecha: 'Fecha Factura'})
                            else:
                                # Rellenar valores faltantes con otras columnas de fecha
                                df_clean['Fecha Factura'] = df_clean['Fecha Factura'].fillna(df_clean[col_fecha])
                                df_clean = df_clean.drop(columns=[col_fecha], errors='ignore')

                    # 5. Eliminar todas las columnas de "Mes Facturacion" (preferimos usar "Fecha Factura")
                    mes_facturacion_cols = [col for col in df_clean.columns if 'Mes facturacion' in col or 'Mes Facturacion' in col or 'Mes facturaci√≥n' in col]
                    df_clean = df_clean.drop(columns=mes_facturacion_cols, errors='ignore')

                    # 6. Unificar columnas de Moneda (eliminar duplicados)
                    moneda_cols = [col for col in df_clean.columns if col == 'Moneda' or col.endswith('.1') and 'Moneda' in col]
                    if len(moneda_cols) > 1:
                        # Mantener solo la primera columna de Moneda
                        for col in moneda_cols[1:]:
                            df_clean = df_clean.drop(columns=[col], errors='ignore')

                    # 7. Reorganizar columnas (las m√°s importantes al principio)
                    columnas_prioritarias = [
                        'Tipo Factura',
                        'Codigo del desembolso',
                        'NIT',
                        'Cliente',
                        'Fecha Factura',
                        '# Factura',
                        'Numero de factura',
                        'Moneda'
                    ]

                    # Columnas que existen y est√°n en la lista prioritaria
                    cols_ordenadas = [col for col in columnas_prioritarias if col in df_clean.columns]

                    # Resto de columnas (que no est√°n en prioritarias)
                    cols_restantes = [col for col in df_clean.columns if col not in cols_ordenadas]

                    # Reordenar
                    df_clean = df_clean[cols_ordenadas + cols_restantes]

                    return df_clean

                # Aplicar limpieza de columnas
                df_filtrado = limpiar_columnas_reporte(df_filtrado)

                # Guardar en session_state para b√∫squeda de PDFs
                st.session_state.df_filtrado_master = df_filtrado

                # Mostrar resultado de filtros con dise√±o mejorado
                st.markdown("### üìä Resultado de Filtros")

                col_res1, col_res2 = st.columns(2)
                with col_res1:
                    st.markdown(f"""
                        <div style='background: white; border: 1px solid #D1D5DB; border-radius: 12px; padding: 20px; text-align: center;'>
                            <div style='font-size: 36px; font-weight: 700; color: #6B7280; margin-bottom: 8px;'>
                                {len(df_seleccionado):,}
                            </div>
                            <div style='font-size: 14px; color: #6B7280; font-weight: 600;'>
                                Registros totales
                            </div>
                        </div>
                    """, unsafe_allow_html=True)
                with col_res2:
                    st.markdown(f"""
                        <div style='background: white; border: 2px solid #3C47D3; border-radius: 12px; padding: 20px; text-align: center;'>
                            <div style='font-size: 36px; font-weight: 700; color: #3C47D3; margin-bottom: 8px;'>
                                {len(df_filtrado):,}
                            </div>
                            <div style='font-size: 14px; color: #0C147B; font-weight: 600;'>
                                ‚úÖ Registros filtrados
                            </div>
                        </div>
                    """, unsafe_allow_html=True)

                if len(df_filtrado) == 0:
                    st.warning("‚ö†Ô∏è No hay registros que cumplan con los filtros seleccionados")
                else:
                    st.markdown("---")

                    # Vista previa
                    with st.expander("üëÄ Vista Previa (primeras 20 filas)", expanded=False):
                        st.dataframe(df_filtrado.head(20), use_container_width=True)

                    st.markdown("---")

                    # Opciones de descarga/subida
                    timestamp = datetime.now().strftime('%Y-%m-%d_%H%M%S')
                    nombre_archivo = f"Reporte_Master_{nombre_seleccion.replace(' ', '_')}_{timestamp}"

                    col_down1, col_down2 = st.columns(2)

                    with col_down1:
                        st.markdown("### üì• Descargar Excel")

                        # Generar Excel
                        buffer_excel = BytesIO()
                        with pd.ExcelWriter(buffer_excel, engine='openpyxl') as writer:
                            df_filtrado.to_excel(writer, sheet_name=nombre_seleccion[:31], index=False)

                        st.download_button(
                            label="üì• Descargar Excel",
                            data=buffer_excel.getvalue(),
                            file_name=f"{nombre_archivo}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True
                        )

                    with col_down2:
                        st.markdown("### üì§ Subir a Drive")

                        if st.button("üöÄ Subir a Google Drive", type="primary", use_container_width=True):
                            with st.spinner("üì§ Subiendo a Google Drive..."):
                                # Crear/obtener carpeta "Reportes Facturaci√≥n"
                                folder_id = drive_manager.create_folder_if_not_exists(drive_manager.FOLDER_REPORTES)

                                if folder_id:
                                    # Subir archivo
                                    result = drive_manager.upload_file(
                                        buffer_excel.getvalue(),
                                        f"{nombre_archivo}.xlsx",
                                        folder_id
                                    )

                                    if result:
                                        st.success(f"‚úÖ ¬°Archivo subido exitosamente!")
                                        st.link_button(
                                            "üîó Abrir en Google Drive",
                                            result['link'],
                                            use_container_width=True
                                        )
                                    else:
                                        st.error("‚ùå Error al subir el archivo")
                                else:
                                    st.error(f"‚ùå Error al crear/obtener carpeta '{drive_manager.FOLDER_REPORTES}'")

            else:
                st.markdown("""
                    <div class='info-banner'>
                        <div style='font-size: 16px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                            üëÜ Carga los datos del Master para comenzar
                        </div>
                        <div style='font-size: 14px; color: #6B7280;'>
                            Haz clic en el bot√≥n "Cargar Datos del Master" para cargar el archivo y generar reportes
                        </div>
                    </div>
                """, unsafe_allow_html=True)

        # ========== BUSCAR PDFs EN DRIVE ==========
        st.markdown("<div style='margin-top: 2.5rem;'></div>", unsafe_allow_html=True)
        st.markdown("""
            <div class='card-info' style='padding: 24px; margin-bottom: 24px;'>
                <h3 style='font-size: 20px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                    üîç Buscar PDFs de Facturas
                </h3>
                <p style='font-size: 14px; color: #6B7280; margin-bottom: 0;'>
                    Busca PDFs autom√°ticamente desde el reporte o manualmente por n√∫mero de factura
                </p>
            </div>
        """, unsafe_allow_html=True)

        try:
            drive_manager_pdf = get_drive_manager()

            if not drive_manager_pdf or not drive_manager_pdf.is_authenticated():
                st.warning("‚ö†Ô∏è Conecta con Google Drive primero")
                st.caption("La conexi√≥n se hace autom√°ticamente al cargar datos del Master")
            else:
                # Opci√≥n 1: B√∫squeda autom√°tica desde el reporte filtrado (PRINCIPAL)
                st.markdown("<div style='margin-top: 1rem;'></div>", unsafe_allow_html=True)
                st.markdown("""
                    <div style='background: #F5F8FE; border: 1px solid #3C47D3; border-radius: 12px; padding: 20px; margin-bottom: 16px;'>
                        <h3 style='font-size: 18px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                            üéØ Opci√≥n 1: Buscar PDFs desde Reporte Filtrado
                        </h3>
                        <p style='font-size: 13px; color: #6B7280; margin-bottom: 0;'>
                            Genera primero un reporte filtrado para buscar sus PDFs autom√°ticamente
                        </p>
                    </div>
                """, unsafe_allow_html=True)

                if st.session_state.get('master_loaded') and st.session_state.get('df_filtrado_master') is not None and not st.session_state.df_filtrado_master.empty:
                    df_filtrado = st.session_state.df_filtrado_master

                    if st.button("üîç Buscar PDFs del Reporte", type="primary", use_container_width=True, key="btn_search_from_report_master"):
                        # Detectar columna de n√∫mero de factura
                        columnas_factura_posibles = [
                            '# Factura',
                            'Numero de factura',
                            'N√∫mero de factura',
                            'N¬∞ Factura',
                            'Factura',
                            'No. Factura'
                        ]

                        columna_factura = None
                        for col in columnas_factura_posibles:
                            if col in df_filtrado.columns:
                                columna_factura = col
                                break

                        if columna_factura:
                            # Extraer n√∫meros de factura del reporte
                            invoice_numbers = [
                                str(num).strip()
                                for num in df_filtrado[columna_factura].dropna().unique()
                                if str(num).strip() and str(num) != 'nan'
                            ]

                            if invoice_numbers:
                                with st.spinner("üîç Buscando PDFs..."):
                                    invoices_found = drive_manager_pdf.search_pdfs_in_facturas_folder(invoice_numbers)

                                    found = [inv for inv in invoices_found if inv.get('encontrado')]
                                    not_found = [inv for inv in invoices_found if not inv.get('encontrado')]

                                    if found:
                                        st.success(f"‚úÖ {len(found)} de {len(invoice_numbers)} PDFs encontrados")

                                        # Bot√≥n de descarga masiva
                                        st.markdown("### üì¶ Descarga Masiva")
                                        if st.button(
                                            f"‚¨áÔ∏è Descargar todos ({len(found)}) en ZIP",
                                            type="primary",
                                            use_container_width=True,
                                            key="btn_download_zip_auto"
                                        ):
                                            with st.spinner("Preparando descarga..."):
                                                zip_content = drive_manager_pdf.download_multiple_files(found)
                                                if zip_content:
                                                    st.download_button(
                                                        label=f"üì• Descargar ZIP ({len(found)} archivos)",
                                                        data=zip_content,
                                                        file_name=f"Facturas_Reporte_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                                                        mime="application/zip",
                                                        use_container_width=True,
                                                        key="btn_final_download_zip_auto"
                                                    )

                                        st.markdown("---")
                                        st.markdown("### üìÑ PDFs Encontrados")

                                        # Mostrar cada PDF
                                        for idx, inv in enumerate(found):
                                            col1, col2, col3, col4 = st.columns([3, 1, 0.8, 0.8])

                                            with col1:
                                                st.write(f"üìÑ {inv['nombre']}")
                                            with col2:
                                                st.write(inv.get('tamano', 'N/A'))
                                            with col3:
                                                if inv.get('link_ver'):
                                                    st.link_button("üëÅÔ∏è", inv['link_ver'], use_container_width=True)
                                            with col4:
                                                file_content = drive_manager_pdf.download_file(inv['id'], inv['nombre'])
                                                if file_content:
                                                    st.download_button(
                                                        "‚¨áÔ∏è",
                                                        file_content,
                                                        inv['nombre'],
                                                        mime="application/pdf",
                                                        key=f"dl_{idx}_auto",
                                                        use_container_width=True
                                                    )

                                    if not_found:
                                        st.markdown("---")
                                        st.warning(f"‚ö†Ô∏è {len(not_found)} facturas no encontradas:")
                                        for nf in not_found:
                                            st.write(f"‚ùå {nf['numero_factura']}")
                            else:
                                st.warning("‚ö†Ô∏è No se encontraron n√∫meros de factura en el reporte")
                        else:
                            st.error(f"‚ùå No se encontr√≥ columna de n√∫mero de factura. Columnas disponibles: {', '.join(df_filtrado.columns[:10])}")
                else:
                    st.info("üìä Genera primero un reporte filtrado para buscar sus PDFs autom√°ticamente")

                # Opci√≥n 2: B√∫squeda manual (SECUNDARIA)
                st.markdown("<div style='margin-top: 1.5rem;'></div>", unsafe_allow_html=True)
                st.markdown("""
                    <div style='background: #F9FAFB; border: 1px solid #D1D5DB; border-radius: 12px; padding: 20px; margin-bottom: 16px;'>
                        <h3 style='font-size: 18px; font-weight: 600; color: #0C147B; margin-bottom: 8px;'>
                            ‚úèÔ∏è Opci√≥n 2: Buscar PDFs Manualmente
                        </h3>
                        <p style='font-size: 13px; color: #6B7280; margin-bottom: 0;'>
                            Busca PDFs espec√≠ficos ingresando el n√∫mero de factura o NIT
                        </p>
                    </div>
                """, unsafe_allow_html=True)

                invoice_numbers_input = st.text_area(
                    "üìã N√∫meros de factura (uno por l√≠nea)",
                    placeholder="FE9133\nFE9134\nITPA5678",
                    height=100,
                    key="invoice_numbers_input_master_v2",
                    help="Ingresa uno o m√°s n√∫meros de factura, cada uno en una l√≠nea diferente"
                )

                if st.button("üîç Buscar PDFs Manualmente", use_container_width=True, key="btn_search_invoices_manual"):
                    if invoice_numbers_input:
                        invoice_numbers = [
                            num.strip()
                            for num in invoice_numbers_input.split('\n')
                            if num.strip()
                        ]

                        with st.spinner("üîç Buscando PDFs..."):
                            invoices_found = drive_manager_pdf.search_pdfs_in_facturas_folder(invoice_numbers)

                            found = [inv for inv in invoices_found if inv.get('encontrado')]
                            not_found = [inv for inv in invoices_found if not inv.get('encontrado')]

                            if found:
                                st.success(f"‚úÖ {len(found)} PDFs encontrados")

                                # Bot√≥n de descarga masiva
                                st.markdown("### üì¶ Descarga Masiva")
                                if st.button(
                                    f"‚¨áÔ∏è Descargar todos ({len(found)}) en ZIP",
                                    type="primary",
                                    use_container_width=True,
                                    key="btn_download_zip_manual"
                                ):
                                    with st.spinner("Preparando descarga..."):
                                        zip_content = drive_manager_pdf.download_multiple_files(found)
                                        if zip_content:
                                            st.download_button(
                                                label=f"üì• Descargar ZIP ({len(found)} archivos)",
                                                data=zip_content,
                                                file_name=f"Facturas_Manual_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                                                mime="application/zip",
                                                use_container_width=True,
                                                key="btn_final_download_zip_manual"
                                            )

                                st.markdown("---")
                                st.markdown("### üìÑ PDFs Encontrados")

                                # Mostrar cada PDF
                                for idx, inv in enumerate(found):
                                    col1, col2, col3, col4 = st.columns([3, 1, 0.8, 0.8])

                                    with col1:
                                        st.write(f"üìÑ {inv['nombre']}")
                                    with col2:
                                        st.write(inv.get('tamano', 'N/A'))
                                    with col3:
                                        if inv.get('link_ver'):
                                            st.link_button("üëÅÔ∏è", inv['link_ver'], use_container_width=True)
                                    with col4:
                                        file_content = drive_manager_pdf.download_file(inv['id'], inv['nombre'])
                                        if file_content:
                                            st.download_button(
                                                "‚¨áÔ∏è",
                                                file_content,
                                                inv['nombre'],
                                                mime="application/pdf",
                                                key=f"dl_{idx}_manual",
                                                use_container_width=True
                                            )

                            if not_found:
                                st.markdown("---")
                                st.warning(f"‚ö†Ô∏è {len(not_found)} facturas no encontradas:")
                                for nf in not_found:
                                    st.write(f"‚ùå {nf['numero_factura']}")
                    else:
                        st.warning("‚ö†Ô∏è Ingresa al menos un n√∫mero de factura")

        except Exception as e:
            st.error(f"‚ùå Error al buscar PDFs: {str(e)}")
            with st.expander("Ver detalles del error"):
                st.exception(e)

# Footer compacto
st.markdown("""
    <div style='text-align: center; color: #9CA3AF; font-size: 12px; margin-top: 3rem; padding: 1rem 0; border-top: 1px solid #E5E7EB;'>
        Sistema de Facturaci√≥n Finkargo v1.0 - Fase 1 MVP | Octubre 2025
    </div>
""", unsafe_allow_html=True)